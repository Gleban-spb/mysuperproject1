Регулярные выражение для поиска IP и MAC адресов
-------------
Регулярные выражение для поиска IP и MAC адресов
Ниже представлены регулярные выражения, которые помогут найти все IP адреса в строке.

Данные регулярные выражения соответствуют шаблонам IPv4 и IPv6 адресов.

Регулярное Выражение для Поиска IP Адресов
Паттерн для поиска IPv4 адресов, соответствует всем значениям от 0.0.0.0to 999.999.999.999и в большинстве случаев этого бывает достаточно.

"([0-9]{1,3}[\.]){3}[0-9]{1,3}"
Найти Все IP Адреса с Помощью Grep
Пропарсим файл и найдем в нем все IP адреса из диапазона от 0.0.0.0до 999.999.999.999с помощью grep:

$ grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" file.txt
Поиск Правильных IPv4 Адресов
Регулярное выражение для поиска и проверки правильных IPv4 адресов:

"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
Поиск IPv6 Адресов
Регулярное выражение для проверки IPv6 адреса:

"((^|:)([0-9a-fA-F]{0,4})){1,8}"

ip4=$(/sbin/ip -o -4 addr list eth0 | awk '{print $4}' | cut -d/ -f1)
ip6=$(/sbin/ip -o -6 addr list eth0 | awk '{print $4}' | cut -d/ -f1)

awk -F'[ :]' '{_[$1 $2 $3 $4 $13]++} _[$1 $2 $3 $4 $13]>2 {print $13}' access.log

Based on the file contect that @ripat provided using the cmdline script I provided the command will list how many times and IP address was found, which is what you requested.

cat test11.txt | awk '{print $NF}' | sort | uniq -c | sort -n
2 88.191.46.60
2 89.110.150.203
6 72.93.200.84
7 210.243.170.181

If you have a large access_log that has mostly single IP address access the remove the single entries from the output by using grep to remove them. the below remove any that appeared 2 or less times

cat test11.txt | awk '{print $NF}' | sort | uniq -c | sort -n | grep "[3-9] "

6 72.93.200.84
7 210.243.170.181

Extracting IP addresses from a log file and list them in another file [duplicate]
grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" /path/to/sourcefile > output.txt

awk 'match($0, /[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/) {i[substr($0,RSTART,RLENGTH)]=1}END{for(ip in i){printf("%s\n", ip)}}' sourcefile

---------------------------------
Извлеките MAC-адрес с помощью grep
Мы можем использовать простое регулярное выражение или регулярное выражение, используя тот факт, что MAC-адрес состоит из шести блоков шестнадцатеричных чисел, разделенных двоеточиями:

$ ifconfig ens33 | grep -o -E ..:..:..:..:..:..
00:0c:29:cc:55:5e
Поскольку это возвращает только MAC-адрес, мы можем сохранить его в переменной:

$ MYMAC=`ifconfig ens33 | grep -o -E ..:..:..:..:..:..`
$ echo $MYMAC
00:0c:29:cc:55:5e
То же самое верно и для команды ip :

$ MYMAC=`ip a s ens33 | grep -o -E ..:..:..:..:..:..`
$ echo $MYMAC
00:0c:29:cc:55:5e ff:ff:ff:ff:ff:ff
Однако результат не такой аккуратный, как мы ожидали. Таким образом, мы могли бы использовать более сложное регулярное выражение или использовать другой инструмент.


Извлеките MAC-адрес с помощью grep и awk
Когда мы объединяем описанный выше метод с awk , мы получаем ожидаемый результат:

$ MYMAC=`ip add | grep link/ether | awk '{print $2}'`
$ echo $MYMAC
00:0c:29:cc:55:5e


ifconfig -a |
awk '/^[a-z]/ { iface=$1; mac=$NF; next }
    /inet addr:/ { print iface, mac }'
	
$ cat /sys/class/net/$(ip route show default | awk '/default/ {print $5}')/address

ifconfig <Interface ex:eth0,eth1> | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'

ip -o link show |cut -d ‘ ‘ -f 2,20
lo: 00:00:00:00:00:00
eth0: 02:01:e4:a2:3a:31

$ ifconfig ens33 | grep -o -E ..:..:..:..:..:..
00:0c:29:cc:55:5e