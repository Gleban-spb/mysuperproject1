шпаргалка по BASH
Ср 28 сен 2022 21:53:04 MSK
/home/user/myproject/mysuperproject1
Лекции - Работа в командной строке BASH (2020)
pwd  - вывод домашней директории
ls - список файлов и папок
ls -l - подробный список файлов и папок
ll - подробный список файлов и папок
ls -la - подробный список файлов и папок вместе со скрытыми и ситемными
man ls - инструкция по работе с ls
cat - просмотр содержимого файла, можно склеивать файлы
realpath - упрощение пути к файлу
more - постраничный просмотр файла работает поиск
less - постраничный просмотр файла работает в обе стороны
tail - просмотр конца файла
mkdir - создать папку
rmdir - удалить пустую папку
rm -r - удалить папку со всем содержимым
touch - создать пустой файл
cp - копировать файл
rm -  удалить файл
cp -R - копировать папку с подпапками
mv - переименовать файл или папку
mc - аналог nc
nano - текстовый редактор
mcedit - текстовый редактор
vim - текстовый редактор
df -h - просмтр размера файловой системы
du -h  - просмотр размера папок
wc - вывод информации о содержимом файла
>    - вывод в файл
>>   - дописывает в конец фала
1>   - вывод в файл
2>   - вывод ошибок в файл
|    - конвеер - передача выходных данных из одной программы на вход другой
<    - передача данных на вход программы
grep  - поиск внутри вывода 
например :
ls -l |grep "git"
-rw-r--r-- 1 user user  492 сен 28 02:16 git.txt
Регулярные выражения
$ grep поисковый_запрос_regex расположение_файла

Изучим некоторые специальные символы, известные как метасимволы. Они помогают создавать более сложные поисковые выражения:
. 	будет соответствовать любому символу;
[ ] 	будет соответствовать диапазону символов;
[^ ] 	будет соответствовать всем символам, кроме указанных в фигурных скобках;
* 	будет соответствовать любому количеству символов, предшествующих звездочке, в том числе нулю;
+ 	будет соответствовать одному или нескольким из стоящих перед ним выражений;
? 	будет соответствовать нулю или одному из стоящих перед ним выражений;
{n} 	будет соответствовать 'n' повторениям предшествующих выражений;
{n,} 	будет соответствовать не менее 'n' повторениям предшествующих выражений;
{n m} 	будет соответствовать не менее 'n' и не более 'm' повторениям предшествующих выражений;
{,m} 	будет соответствовать не более или равному 'm' повторениям предшествующих выражений;
	является escape-символом (символом экранирования), используемым, когда нужно включить один из метасимволов.

sudo -i  - включить root
nmap -sn -T4 192.168.0.0-255 -oN home.txt - показать все включенные машины внутри сети в файл
grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" home.txt >ip.txt - выделение ip адресов из файла home.txt в файл ip.txt
nmap -T5 -p0-65535 -iL ip.txt -oN home_big.csv - просканровать все порты на всех включенных в сеть машинах из файла ip.txt в файл home_big.csv
одной командой :
nmap -sn -T4 192.168.0.0-255 -oN home.txt; grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" home.txt >ip.txt; nmap -T5 -p0-65535 -iL ip.txt -oN home_big.csv
exit - выйти из root 

#Монтирование общих папок с windows на даче:
sudo mount //192.168.2.35/work/   ./mnt/work -t cifs -o user=smb,password=smb,rw,iocharset=utf8,file_mode=0777,dir_mode=0777
sudo mount //192.168.2.35/video2/   ./mnt/video2 -t cifs -o user=smb,password=smb,rw,iocharset=utf8,file_mode=0777,dir_mode=0777

----------
#файлы примеров sh из книги KaliLinyx.Библия пентестера
#!/bin/bash
#Пингуем и получаем DNS-имена для IP-адресов, хранящихся в файле
#Запускаем из под root  (sudo -i)
#Выводим пользователю подсказку ввести имя файла и путь до него.
read -p "Enter the IP addresses file name / path:" FILE_PATH_NAME
function check_host(){
#Если значение IP-адреса не пусто
if [[ -n $IP_ADDRESS ]]
then
ping_cmd=$(nmap -sn $IP_ADDRESS| grep 'Host is up' | cut
-d '(' -f 1)
echo '------------------------------------------------'
if [[ -z $ping_cmd ]]
then
printf "$IP_ADDRESS is down\n"
else
printf "$IP_ADDRESS is up\n"
dns_name
fi
fi
}
function dns_name(){
dns_name=$(host $IP_ADDRESS)
printf "$dns_name\n"
}
#Проходим циклом по IP-адресам в файле
for ip in $(cat $FILE_PATH_NAME)
do
IP_ADDRESS=$ip
check_host
done
 4  
simpleping.sh
@@ -1,5 +1,7 @@
#!/bin/bash
#Пингуем хост с помощью Nmap
#Запускаем из под root  (sudo -i)
#bush simpleping.sh 192.168.2.35
#Пингуем хост с помощью Nmap 
### Глобальные переменные ###
#Сохраняем IP-адрес
IP_ADDRESS=$1
----------
