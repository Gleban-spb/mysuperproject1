Python: история команд в консоли
PythonЧто бы просмотреть все введённые ранее команды в консоли Python – есть два варианта.

Первый – выведет список со всеми командами в элементах:

>>> import readline
>>> for i in range(readline.get_current_history_length()):
... print readline.get_history_item(i)

Второй – по их номерам:

>>> import readline
>>> readline.get_current_history_length()
153
>>> readline.get_history_item(153)
'readline.get_current_history_length()'
-----------------
Python для DevOps

Последовательности — семейство встроенных типов данных, включающее
списки (list), кортежи (tuple), диапазоны (range), строковые значения (string)
и двоичные данные (binary). Последовательности служат для представления
упорядоченных конечных последовательностей элементов.
С помощью операторов in и not in можно проверить, входит ли конкретный
элемент в последовательность.
Ссылаться на содержимое последовательности можно по индексу.
Индекс элемента можно узнать с помощью метода index

Списки представляют упорядоченный набор элементов произвольного типа. На синтаксис
списка указывают квадратные скобки.

Возведение чисел от 0 до 9 в квадрат в цикле for и добавление их в конец списка:
squares=[] 
for i in range(10):
    squared=i*i
    squares.append(squared)

squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
 
Степени другим манером
squares=[]
squares=[i*i for i in range(20) if i%2==0] #Четные
squares
[0, 4, 16, 36, 64, 100, 144, 196, 256, 324]
len(squares)
10
min(squares)
0
max(squares)
324
dva=squares
dva
[0, 4, 16, 36, 64, 100, 144, 196, 256, 324]
tri=dva+dva
tri
[0, 4, 16, 36, 64, 100, 144, 196, 256, 324, 0, 4, 16, 36, 64, 100, 144, 196, 256, 324]

tri[:7] 
tri.count(64)
tri.index(36)

Строковые значения. Строковые последовательности представляют собой упорядоченные наборы
символов, заключенные в кавычки. В строках Python 3 по умолчанию используется кодировка UTF-8.
Заключая текст в тройные кавычки, можно создавать многострочные строковые значения.
Метод strip, возвращает строку без пробелов в начале или в конце. Существуют также методы для 
удаления пробелов только с правой или левой стороны строки 
>>> input = " I want more "
>>> input.strip()
'I want more'
>>> input.rstrip()
' I want more'
>>> input.lstrip()
'I want more '
"
В то же время существуют методы ljust и rjust для дополнения строк символами. По умолчанию 
они дополняют строковые значения пробелами, но могут и принимать в виде аргумента символ для дополнения:
>>> output = 'Barry'
>>> output.ljust(10)
'Barry
'
>>> output.rjust(10, '*')
'*****Barry'

Метод split разбивает строку, преобразуя ее в список строк. По умолчанию
в качестве токена, на основе которого выполняется разбиение, используется
пробел. Для разбиения по другому символу можно добавить необязательный
аргумент:
>>> text = "Mary had a little lamb"
>>> text.split()
['Mary', 'had', 'a', 'little', 'lamb']
>>> url = "gt.motomomo.io/v2/api/asset/143"
>>> url.split('/')
['gt.motomomo.io', 'v2', 'api', 'asset', '143']

новое строковое значение из последовательности строковых значений и 
объединить (join) их в единое целое. В следующем примере
посередине списка других строк вставляется строка-разделитель:
>>> items = ['cow', 'milk', 'bread', 'butter']
>>> " and ".join(items)
'cow and milk and bread and butter'

#Black Hat Python - программирование для хакеров и пентестеров. 2-е изд.2022.Зейтц Джастин, Арнольд Тим
sudo apt-get install python3.10-venv
sudo apt update && install python3.10-pip 
cd bhp
source venv3/bin/activate   
python
pip --version 
pip list
deactivate

#Интегрированная среда разработки (integrated development environment, IDE)
#PyCharm,  Visual Studio Code, WingIDE
cd ~; cd ./Загрузки/pycharm-community-2022.3.2/bin; ./pycharm.sh   

выражение x += 1, то же что x = x + 1


